library(datasets)
data(iris)
?iris
dimnames(iris)
iris
iris[Sepal.Length]
iris[,Sepal.Length]
iris[,2]
iris[,1]
split(iris, iris$Species)
lapply(split(iris, iris$Species), colmeans(x, c("Sepal.Length"))
)
lapply(split(iris, iris$Species), function(x) colmeans(x, c("Sepal.Length")))
lapply(split(iris, iris$Species), function(x) colMeans(x, c("Sepal.Length")))
s <- split(iris, iris$Species)
lapply(s, function(x) colMeans(x, c("Sepal.Length")))
str(colMeans)
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
s$Sepal.Length
s
s$virginica
s$virginica$Sepal.Length
mean(s$virginica$Sepal.Length)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
str(apply)
?apply
data(mtcars)
?mtcars
?tapply
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(hp, cyl, mean))
p <- with(mtcars, tapply(hp, cyl, mean))
p[1]
p[1,1]
p["4"]
p["8"] - p["4"]
debug(ls)
ls
exit
q
q
quit
str(ls)
?ls
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
{
{
{
{
{
{
{
{
?debug
?debug
?inverse
??inverse
c(1:4,2,2)
Matrix(c(1:4),2,2)
x <- rbind(c(1,2), c(3,4))
x
solve(x)%*%x
y <- solve(x)%*%x
x%*%y
x
y
x*y
y%*%x
x <- rbind(c(1,2), c(2,1))
y <- solve(x)%*%x
y
x%*%y
x
y
y <- x%*%solve(x)
y
x%*%y
x
?solve
solve(x)
Matrix(1:4)
base::Matrix(1:4)
?Matrix
??Matrix
library(Matrix)
Matrix(1:4)
Matrix(1:4, 2, 2)
Matrix(c(1,2,2,1), 2, 2)
x <- Matrix(c(1,2,2,1), 2, 2)
x
source('~/Documents/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cacheMatrix(x)
makeCacheMatrix(x)
cacheSolve(x)
x <- makeCacheMatrix(x)
cacheSolve(x)
cacheSolve(x)
data
x
x$data
x <- makeCacheMatrix(x)
x$data
x
source('~/Documents/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x <- makeCacheMatrix(Matrix(c(1,2,2,1), 2, 2))
x
x$data
x$getinverse()
x$get()
solve(x$get())
cacheSolve(x)
cacheSolve(x)
source('~/Documents/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
s <= rpois(5,2)
rpois(5,2)
package.install('lattice')
install.package('lattice')
install?
;
?install
??install
install.packages('lattice')
install.packages('ggplot2')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.lmline()
?trellis.par.set()
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month, smooth = "loess")
?qplot
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month) + stats_smooth("loess")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month) + geom_smooth()
setwd("~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2")
source('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
View(processeddata)
check = processeddata[complete.cases(processeddata$EVTYPE)]
check = processeddata[complete.cases(processeddata[,8])]
processeddata$EVTYPE[]
check = processeddata[complete.cases(processeddata$EVTYPE[])]
check = processeddata[complete.cases(processeddata$EVTYPE[]),]
remove(check)
processeddata = processeddata[complete.cases(processeddata$EVTYPE[]),]
length(processeddata[complete.cases(processeddata$BGN_TIMESTAMP[]),1]
)
length(processeddata[complete.cases(processeddata$END_TIMESTAMP[]),1])
length(processeddata[complete.cases(processeddata$BGN_DATE[]),1])
length(processeddata[complete.cases(processeddata$BGN_TIME[]),1])
check = processeddata[complete.cases(processeddata$BGN_TIMESTAMP[]),]
check = processeddata[is.na(processeddata$BGN_TIMESTAMP[]),]
View(check)
tmpdata = initprocesseddata(check[,])
tmpdata = initprocesseddata(check[,])
x['TIME_ZONE']
x['ZONENAMES']
check = processeddata[is.na(processeddata$ZONENAMES[]),]
check = processeddata[is.na(processeddata$BGN_TIMESTAMP[]),]
tmpdata = initprocesseddata(check[,])
x['BGN_TIMESTAMP']
createbegintimestamps <- function(x) {
if (!is.na(x['BGN_DATE']) && str_trim(x['BGN_DATE']) != '') {
datetime = paste(str_split(str_trim(x['BGN_DATE']), ' ', 2)[[1]][1], str_trim(x['BGN_TIME']), sep = ' ')
format = getdatetimeformat(x['BGN_DATE'], x['BGN_TIME'])
x['BGN_TIMESTAMP'] <- as.POSIXct(strptime(datetime, format = format, tz=str_trim(x['ZONENAMES'])))
} else {
x['BGN_TIMESTAMP'] <- NA
}
return(x['BGN_TIMESTAMP'])
}
createendtimestamps <- function(x) {
if (!is.na(x['END_DATE']) && str_trim(x['END_DATE']) != '') {
datetime = paste(str_split(str_trim(x['END_DATE']), ' ', 2)[[1]][1], str_trim(x['END_TIME']), sep = ' ')
format = getdatetimeformat(x['END_DATE'], x['END_TIME'])
x['END_TIMESTAMP'] <- as.POSIXct(strptime(datetime, format = "%m/%d/%Y %H%M", tz=str_trim(x['ZONENAMES'])), origin = '1970-01-01')
} else {
x['END_TIMESTAMP'] <- NA
}
return(x['END_TIMESTAMP'])
}
tmpdata = initprocesseddata(check[,])
source('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
source('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
summary(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('TSTM', 'THUNDERSTORM', processeddata$EVTYPE)
summary(processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINS', 'THUNDERSTORM WINDS', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WIND', 'THUNDERSTORM WINDS', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('HIGH WIND/BLIZZARD', 'BLIZZARD/HIGH WIND', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('FLASH FLOODING', 'FLASH FLOOD', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
?lapply
processeddata$EVTYPE <- lapply(str_trim, processeddata$EVTYPE)
processeddata$EVTYPE <- lapply(processeddata$EVTYPE, str_trim)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WINDSS', 'WINDS', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTROM WIND', 'THUNDERSTORM WINDS', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('HIGH WINDS AND WIND CHILL', 'HIGH WINDS/WIND CHILL', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('HIGH WIND/WIND CHILL', 'HIGH WINDS/WIND CHILL', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('NON THUNDERSTORM WINDS', 'NON-THUNDERSTORM WINDS', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('COASTAL  FLOODING/EROSION', 'COASTAL FLOODING/EROSION', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('CSTL FLOODING/EROSION', 'COASTAL FLOODING/EROSION', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('VOG', 'FOG', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINDS  (G45)', 'THUNDERSTORM WINDS (G45)', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINDS 45', 'THUNDERSTORM WINDS (G45)', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINDS 40', 'THUNDERSTORM WINDS (G40)', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('SNOW AND COLD', 'SNOW/COLD', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('SNOW\\COLD', 'SNOW/COLD', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('/ ', '/', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub(' AND ', '/', processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINDS LIGHTNING', 'THUNDERSTORM WINDS/LIGHTNING', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINDS HAIL', 'THUNDERSTORM WINDS/HAIL', processeddata$EVTYPE)
processeddata[grep('HAIL', processeddata$EVTYPE), ]
unique(processeddata[grep('HAIL', processeddata$EVTYPE), 8])
processeddata$EVTYPE <- gsub(', ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub(' & ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM HAIL', 'THUNDERSTORM/HAIL', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('THUNDERSTORM WINDSHAIL', 'THUNDERSTORM WINDS/HAIL', processeddata$EVTYPE)
summary(processeddata$EVTYPE)
summary(as.factor(processeddata$EVTYPE))
processeddata$EVTYPE <- gsub('HIGH WIND', 'HIGH WINDS', processeddata$EVTYPE)
unique(processeddata[grep('WIND', processeddata$EVTYPE), 8])
processeddata$EVTYPE <- gsub('WINDSS', 'WINDS', processeddata$EVTYPE)
unique(processeddata[grep('WIND', processeddata$EVTYPE), 8])
processeddata$EVTYPE <- gsub('  ', ' ', processeddata$EVTYPE)
unique(processeddata[grep('WIND', processeddata$EVTYPE), 8])
processeddata$EVTYPE <- gsub('- ', '/', processeddata$EVTYPE)
summary(as.factor(processeddata$EVTYPE))
as.factor(processeddata$EVTYPE)
unique(processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WND', 'WINDS', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WIND', 'WINDS', processeddata$EVTYPE)
unique(processeddata$EVTYPE)[order(EVTYPE)]
unique(processeddata$EVTYPE)[order(1)]
unique(processeddata$EVTYPE)[]
order(unique(processeddata$EVTYPE))
unique(processeddata[order(processeddata$EVTTYPE),]$EVTYPE)
attach(processeddata)
unique(processeddata$EVTYPE)[order(EVTYPE)]
unique(processeddata[order(EVTYPE),]$EVTYPE)
processeddata$EVTYPE <- gsub('WINDSS', 'WINDS', processeddata$EVTYPE)
unique(processeddata[order(EVTYPE),]$EVTYPE)
processeddata$EVTYPE <- gsub('AVALANCE', 'AVALANCHE', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BEACH EROSIN', 'BEACH EROSION', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BITTER WINDS CHILL', 'BITTER WINDS CHILL TEMPERATURES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BITTER WINDS CHILL TEMPERATURES', 'BITTER WINDS/CHILL TEMPERATURES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BLOW-OUT TIDE', 'BLOW-OUT TIDES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BLOWING SNOW/EXTREME WINDS CH', 'BLOWING SNOW/EXTREME WINDS/CHILL TEMPERATURES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BLOWING SNOW/EXTREME WINDS CHI', 'BLOWING SNOW/EXTREME WINDS/CHILL TEMPERATURES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BLOWING SNOW/EXTREME WINDS CHILL', 'BLOWING SNOW/EXTREME WINDS/CHILL TEMPERATURES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WINDS CHILL', 'WINDS CHILL/TEMPERATURES', processeddata$EVTYPE)
processeddata$EVTYPE <- rawdata$EVTYPE
processeddata$EVTYPE <- apply(processeddata$EVTYPE, str_trim)
processeddata$EVTYPE <- gsub('  ', ' ', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('/ ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub(', ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('- ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub(' & ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub(' AND ', '/', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('AVALANCE', 'AVALANCHE', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BEACH EROSIN', 'BEACH EROSION', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WINDS CHILL', 'WINDS/CHILL', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('BLOW-OUT TIDE', 'BLOW-OUT TIDES', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('TSTM', 'THUNDERSTORM', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WND', 'WINDS', processeddata$EVTYPE)
processeddata$EVTYPE <- gsub('WINDSS', 'WINDS', processeddata$EVTYPE)
unique(processeddata[order(EVTYPE),]$EVTYPE)
processeddata$EVTYPE <- apply(processeddata$EVTYPE, str_trim)
processeddata$EVTYPE <- apply(processeddata$EVTYPE, str_trim)
processeddata$EVTYPE <- apply(processeddata$EVTYPE, FUN=str_trim)
?apply
processeddata$EVTYPE <- apply(processeddata, EVTYPE, str_trim)
dimnames(processeddata)
processeddata$EVTYPE <- apply(processeddata, 8, str_trim)
processeddata$EVTYPE <- apply(processeddata$EVTYPE, FUN=str_trim)
processeddata$EVTYPE <- apply(processeddata$EVTYPE, 2, str_trim)
processeddata$EVTYPE <- apply(processeddata$EVTYPE, 1, str_trim)
dim(processeddata$EVTYPE)
dim(processeddata[,8])
dim(processeddata)
processeddata <- apply(processeddata, 1, str_trim)
unique(processeddata[order(EVTYPE),]$EVTYPE)
for (begin in seq(1, numrecords, by=20000)) {
end = begin + readsizeof - 1
tmpdata = rawdata[begin:end, ]
tmpdata = initprocesseddata(tmpdata[complete.cases(tmpdata$EVTYPE[]),])
processeddata = rbind(processeddata, tmpdata)
remove(tmpdata)
offset = offset + 20000
}
View(processeddata)
source('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
source('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
debugSource('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
x
debugSource('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
source('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
debugSource('~/Documents/datasciencecoursera/ReproducibleResearch/RepResearchProject2/project2.R')
x['LATITUDE']
gettimestamp(x)
gettimestamp(x)
x['BGN_DATE']
str_trim(x['BGN_DATE'])
